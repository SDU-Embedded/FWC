#!/opt/rakudo-star-2017.01/bin/perl6
use v6.c;
use lib "./lib";

# Perl5 compatibility
use Inline::Perl5; 

my $p5 = Inline::Perl5.new; 
$p5.use('NetAddr::IP');
$p5.use('IPTables');

use Policies::FwcGrammar; 
use Policies::FwcActions;
use Zones::FwcActions; 
use Zones::FwcGrammar;
use MONKEY-SEE-NO-EVAL; 
use Text::Table::Simple;
use IptablesGenerator::IptablesGenerator;

multi MAIN( Str :$policies=".", Str :$zones=".", Int :$verbose = 0, Bool :$dump_rules = False,Bool :$dump_zones = False,Str :$dump_format = "table" ) { #Named parameters
        note "Policy path: $policies" if $verbose > 1;
	note "Zone path: $zones" if $verbose > 1;
        note "Verbose: $verbose" if $verbose > 0;
	note "Dumping rules to $dump_format" if $dump_rules or $dump_zones;

	# Match files with "policy" extension
	my @policy_files = dir($policies, test => /.*\.policy$/);
	my $number_of_policies = @policy_files.elems;
	note "Number of policy files found: $number_of_policies" if $verbose > 0;


	# Match files with "zone" extension
	my @zone_files = dir($zones, test => /.*\.zone$/);
	my $number_of_zones = @zone_files.elems;
	note "Number of zones files found: $number_of_zones" if $verbose > 0;

	# Loop through all zone files, parse and append
	my %FwcZones;
	for @zone_files -> $file {
	        my $zone_content = try slurp($file);
	        if ($!) {
	             note "Unable to open and read file, $file, $!";
	        }
		%FwcZones.append: Zones::FwcGrammar.parse($zone_content, actions => Zones::FwcActions.new).made
	}
	dumpZones(%FwcZones, $dump_format) if $dump_zones;

	# Loop through all policy files, parse and append
	my (%FwcRules, %FwcAllZones);
	for @policy_files -> $file {
	        my $policy_content = try slurp($file);
	        if ($!) {
	             note "Unable to open and read file,$file, $!";
	        }

		my %rules = Policies::FwcGrammar.parse($policy_content, actions=> Policies::FwcActions.new).made;
	        %FwcRules.append: %rules<Rules>[0];
		%FwcAllZones.append: %rules<AllZones>[0];
	}
	dumper(%FwcRules, $dump_format) if $dump_rules;

	note "Number of zones: ", %FwcZones.elems if $verbose > 0;
	note "Number of policies: ", %FwcAllZones.elems if $verbose > 0;

	# Error checking
	for keys %FwcAllZones -> $key {
		if %FwcZones{$key}:exists {
			#say "\t$key does exist";
		} else {
			 note "\t\"$key\" is not a defined zone";
		}
	}

	for keys %FwcZones -> $key {
		if %FwcAllZones{$key}:exists {
			#say "\t$key does exist";
		} else {
			note "\t\"$key\" is defined but not used";
		}
	}


	my $iptablesGenerator = IptablesGenerator.new(Zones => %FwcZones, Rules => %FwcRules, Filename => "IptablesRun.sh");
	$iptablesGenerator.GenerateUniqueChainNames();
	$iptablesGenerator.GenerateChains();
	$iptablesGenerator.GenerateRules();
#	$iptablesGenerator.GenerateClientServerProtoChains();
#	$iptablesGenerator.GenerateSpoofRules();
}


sub dumper(%data, $format = "table"){
	my @rows;
        for %data.kv -> $from, @rules {
		for @rules -> $rule {
			my ($to, %options) = $rule.kv;

			my $protocol = %options<Protocol>;
			%options<Protocol>:delete;

			@rows.push: ($protocol, $from, $to, %options.perl);
		}
        }

	my @headers = ['Protocol','From','To','Options'];

	if $format eq "table" {
		my @table = lol2table(@headers,@rows);
		.note for @table;
	}

	if $format eq "json" {
		say('{"FWC":[');
		my $output;
		for @rows -> $row {
			$output ~= '{';
			my Int $i = 0;
			my %options = EVAL($row[3]);
			for @headers -> $head {
				if $head eq "Options" {
					$output~= '"Options": {';
					for %options.kv -> $key, $value {
						$output ~= "\"$key\":\"$value\","
					}
					$output = chop($output);
					$output~= '},';
				} else {
					$output~="\"$head\":\"$row[$i++].subst(/\"/, "'",:g)\",";
				}
			}
			$output =chop($output);
			$output ~= '},';
		}
		$output = chop $output;
		say("$output]}");
	}
}


sub dumpZones(%FwcZones, $format = "table"){
	my @rows;
	for %FwcZones.kv -> $zonename, $ip {
		$ip{'cidr'} = '-' unless $ip{'cidr'};
		@rows.push: ($zonename, $ip{'interface'},$ip{'islocal'},$ip{'ip'}, $ip{'cidr'});
	}


	my @headers = ['Zone name','Interface','IsLocal','IP','CIDR'];

        if $format eq "table" {
		my @table = lol2table(@headers,@rows);
		.note for @table;
	}

	
        if $format eq "json" {
		say('{"FWC":[');
		my $output;
		for @rows -> $row {
			$output ~= '{';
			my Int $i = 0;
			for @headers -> $head {
				$output~="\"$head\":\"$row[$i++].subst(/\"/, "'",:g)\",";
			}
			$output =chop($output);
			$output ~= '},';
		}
		$output = chop $output;
		say("$output]}");

	}	
}

